blueprint:
  name: Auto Turn Off Lights After Vacancy (Multi-Sensor)
  description: >
    Turns off selected lights only after ALL chosen motion/occupancy sensors
    have been clear (off) for the entire delay period. Works with mixed sensors
    (e.g., PIR, mmWave, Third Reality 3RMS16BZ via ZHA/Zigbee2MQTT).
  domain: automation
  input:
    presence_sensors:
      name: Motion/Occupancy Sensors
      description: Select one or more binary_sensors (motion or occupancy).
      selector:
        entity:
          multiple: true
          domain: binary_sensor
          device_class:
            - motion
            - occupancy
    target_light:
      name: Light(s)
      description: One or more lights or light groups to turn off
      selector:
        target:
          entity:
            domain: light
    delay_time:
      name: Vacancy Delay
      description: Time that ALL sensors must remain clear before lights turn off
      default: 02:00:00
      selector:
        duration: {}

mode: restart

# Re-evaluate whenever any sensor changes, or on reload/start
trigger:
  - platform: state
    entity_id: !input presence_sensors
  - platform: homeassistant
    event: start
  - platform: event
    event_type: automation_reloaded

condition:
  # Only bother if the light is currently on
  - condition: state
    entity_id: !input target_light
    state: "on"

action:
  # If anything is ON, don't proceed
  - condition: template
    value_template: >
      {% set sensors = expand(inputs.presence_sensors) %}
      {{ sensors | selectattr('state','eq','on') | list | count == 0 }}

  # Wait the full delay UNLESS any sensor fires to 'on' again (which cancels)
  - wait_for_trigger:
      - platform: state
        entity_id: !input presence_sensors
        to: "on"
    timeout: !input delay_time
    continue_on_timeout: true

  # Only continue if the wait TIMED OUT (meaning no sensor turned 'on')
  - condition: template
    value_template: "{{ wait.trigger is none }}"

  # Double-check all sensors are still OFF (defensive check)
  - condition: template
    value_template: >
      {% set sensors = expand(inputs.presence_sensors) %}
      {{ sensors | selectattr('state','eq','off') | list | count == (sensors | list | count) }}

  - service: light.turn_off
    target: !input target_light
