blueprint:
  name: Auto Turn Off Lights After Vacancy (Single Trigger, Multi-Sensor Check)
  description: >
    Turns off selected lights only after ALL chosen motion/occupancy sensors
    have remained clear (off) for the entire delay period. A single sensor is
    used as the trigger; any sensor going ON during the delay cancels the turn-off.
    Works with mixed sensors (PIR, mmWave, Third Reality 3RMS16BZ via ZHA/Zigbee2MQTT).
  domain: automation

  input:
    trigger_sensor:
      name: Trigger Sensor (single)
      description: Single motion/occupancy binary_sensor that initiates the vacancy timer
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - motion
            - occupancy
          multiple: false

    presence_sensors:
      name: Motion/Occupancy Sensors (monitored set)
      description: One or more binary_sensors (motion or occupancy) that must stay OFF for the whole delay
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - motion
            - occupancy
          multiple: true

    lights:
      name: Light(s)
      description: One or more lights or light groups to turn off
      selector:
        entity:
          domain: light
          multiple: true

    delay_time:
      name: Vacancy Delay
      description: Time that ALL monitored sensors must remain clear before lights turn off
      default: 02:00:00
      selector:
        duration: {}

mode: restart

# Re-evaluate on trigger sensor going OFF, plus HA start/reload
trigger:
  - platform: state
    entity_id: !input trigger_sensor
    to: "off"
  - platform: homeassistant
    event: start
  - platform: event
    event_type: automation_reloaded

condition:
  # Only proceed if at least one selected light is currently ON
  - condition: template
    value_template: >
      {% set ls = expand(!input lights) %}
      {{ ls | selectattr('state','eq','on') | list | count > 0 }}

  # Start only if ALL monitored sensors are currently OFF
  - condition: template
    value_template: >
      {% set s = expand(!input presence_sensors) %}
      {{ s | selectattr('state','eq','on') | list | count == 0 }}

action:
  # Wait the full delay UNLESS any monitored sensor turns ON (which cancels)
  - wait_for_trigger:
      - platform: state
        entity_id: !input presence_sensors
        to: "on"
    timeout: !input delay_time
    continue_on_timeout: true

  # Only continue if the wait TIMED OUT (meaning no sensor turned 'on' during the delay)
  - condition: template
    value_template: "{{ wait.trigger is none }}"

  # Defensive re-check: ensure ALL monitored sensors are still OFF
  - condition: template
    value_template: >
      {% set s = expand(!input presence_sensors) %}
      {{ s | selectattr('state','eq','off') | list | count == (s | list | count) }}

  - service: light.turn_off
    target:
      entity_id: !input lights
